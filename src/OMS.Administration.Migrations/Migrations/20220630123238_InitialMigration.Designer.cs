// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OMS.Administration.Infrasturcture.Persistence;

namespace OMS.Administration.Migrations.Migrations
{
    [DbContext(typeof(AdministrationDbContext))]
    [Migration("20220630123238_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("OMS.Administration.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("Stores Created by data");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Stores Created on data");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasComment("Stores Modified by data");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Stores Modified on data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("OMS.Administration.Domain.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("Stores Created by data");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Stores Created on data");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasComment("Stores Modified by data");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Stores Modified on data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ParentOrganizationId")
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TaxIdenfier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("TurnOver")
                        .HasColumnType("double precision");

                    b.Property<int>("YearOfEstablishment")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("OMS.Administration.Domain.Entities.Contact", b =>
                {
                    b.HasOne("OMS.Administration.Domain.Entities.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId");

                    b.OwnsOne("OMS.Administration.Domain.Entities.Address", "ContactAddress", b1 =>
                        {
                            b1.Property<string>("ContactId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("StreetName");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("integer")
                                .HasColumnName("ZipCode");

                            b1.HasKey("ContactId");

                            b1.ToTable("Contacts");

                            b1.WithOwner()
                                .HasForeignKey("ContactId");
                        });

                    b.Navigation("ContactAddress");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("OMS.Administration.Domain.Entities.Organization", b =>
                {
                    b.HasOne("OMS.Administration.Domain.Entities.Organization", "ParentOrganization")
                        .WithMany()
                        .HasForeignKey("ParentOrganizationId");

                    b.OwnsOne("OMS.Administration.Domain.Entities.Address", "OfficeAddress", b1 =>
                        {
                            b1.Property<string>("OrganizationId")
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("StreetName");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("integer")
                                .HasColumnName("ZipCode");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("OfficeAddress");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("OMS.Administration.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
